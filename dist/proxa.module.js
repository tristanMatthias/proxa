const e=Symbol("proxa"),r=Symbol("proxaUpdate"),o=Symbol("proxaCallbacks"),t=Symbol("proxaPropCallbacks"),n=Symbol("proxaParent"),s=Symbol("proxaParentProperty"),a=Symbol("proxaIsArray"),c=(e,r,n)=>{const s=e;if(n){const e=s[t].get(n);if(!e)throw new Error(`Could not find any callbacks for property '${n}'`);const o=e.indexOf(r);if(o<0)throw new Error(`Callback does not exist on property '${n}' for this object`);e.splice(o,1)}else{const e=s[o].indexOf(r);if(e<0)throw new Error("Callback does not exist on this object");s[o].splice(e,1)}return e},l=[e,r,o,t,n,s,a,"toJSON"],i=o=>{if(o[e])return o;const t=new Proxy(o,{get(r,o){if(l.includes(o))return r[o];const n=r[o];if(n&&"object"==typeof n&&!n[e]){const e=r[o]=i(n);f(e,r[o]instanceof Array,t,o)}return r[o]},set:(e,o,t)=>(e[o]===t||(e[o]=t,l.includes(o)||e[r](o,t,o)),!0)});return t},f=(c,i,f,p)=>{if(!c[e]){if(c[e]=!0,c[o]=[],c[t]=new Map,c[r]=(e,a,l)=>{var i;c[o].forEach(r=>r(c,e,a,l)),null===(i=c[t].get(e))||void 0===i||i.forEach(r=>r(c,e,a,l)),c[n]&&c[n][r](c[s],c,[l,e].join("."))},f){if(!p)throw new Error("Unknown parentProperty");c[n]=f,c[s]=p}i&&(c[a]=!0),Object.defineProperty(c,"toJSON",{enumerable:!1,writable:!1,value:()=>{const r=Object.assign({},c);return l.forEach(e=>delete r[e]),Object.entries(r).forEach(([o,t])=>{t&&"object"==typeof t&&t[e]&&(r[o]=t.toJSON())}),c[a]?Object.entries(r).reduce((e,[r,o])=>(/^\d+$/.test(r)&&e.push(o),e),[]):(delete r.toJSON,r)}})}},p=(r,n,s)=>{let a;return r[e]?a=r:(a=i(r),f(a,r instanceof Array)),n&&((e,r,n)=>{if(n||e[o].includes(r)){if(n){let o=e[t].get(n);o||(o=[],e[t].set(n,o)),o.push(r)}}else e[o].push(r)})(a,n,s),a};export{c as off,p as proxa};
